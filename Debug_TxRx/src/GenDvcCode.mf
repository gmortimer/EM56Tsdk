function GenDvcCode( Dvc )
%Generate Device Code for device name Dvc
fid = fopen( [ Dvc, '_tplate.c' ], 'w' );
fprintf( fid, '#include "include.h"\n' );
fprintf( fid, '\n' );
fprintf( fid, '\n' );
fprintf( fid, '// =================================\n' );
fprintf( fid, '// Boilerplate Function Declarations\n' );
fprintf( fid, '// =================================\n' );
fprintf( fid, 'void %sInit(\n', Dvc );
fprintf( fid, '    %s *pd,\n', Dvc );
fprintf( fid, '    char      *Name,\n' );
fprintf( fid, '    u32       BaseAddr,\n' );
fprintf( fid, '    SysCtrl   *pSysCtrl,\n' );
fprintf( fid, '    SysDvce   *pSysDvce,\n' );
fprintf( fid, '    SysDesc   *pSysDesc,\n' );
fprintf( fid, '    SysPtrs   *pSysPtrs,\n' );
fprintf( fid, '    SysData   *pSysData,\n' );
fprintf( fid, '    %sDesc *p%sDesc,\n', Dvc, Dvc );
fprintf( fid, '    %sData *p%sData\n', Dvc, Dvc );
fprintf( fid, '    );\n' );
fprintf( fid, 'static void SetParams    ( %s *pd );\n', Dvc );
fprintf( fid, 'static void SysDvceDump  ( %s *pd );\n', Dvc );
fprintf( fid, 'static void SysDescDump  ( %s *pd );\n', Dvc );
fprintf( fid, 'static void SysDataDump  ( %s *pd );\n', Dvc );
fprintf( fid, 'static void DvcDataInit  ( %s *pd );\n', Dvc );
fprintf( fid, 'static void DvcDataUpd   ( %s *pd );\n', Dvc );
fprintf( fid, 'static void DvcDescDump  ( %s *pd );\n', Dvc );
fprintf( fid, 'static void DvcDataDump  ( %s *pd );\n', Dvc );
fprintf( fid, '\n' );
fprintf( fid, '// =================================================\n' );
fprintf( fid, '// Device Structure Member Functions (public access)\n' );
fprintf( fid, '// =================================================\n' );
fprintf( fid, '// Insert device-specific member function prototypes here\n' );
fprintf( fid, '// Example: static inline void Start         ( %s *pd ) { hwWriteCtrlReg( SYSDVC( BaseAddr ), %s_CTRL_REG << 2, %s_START ); }\n', Dvc, upper( Dvc ), upper( Dvc ) );
fprintf( fid, '// Example: static void        WriteBuf      ( %s *pd, u32 addr, u32 data );\n', Dvc );
fprintf( fid, '\n' );
fprintf( fid, '// Declare init structure here with member functions\n' );
fprintf( fid, '%s %sInitStr = {\n', Dvc, Dvc );
fprintf( fid, '    NULL,\n' );
fprintf( fid, '    Dump\n' );
fprintf( fid, '};\n' );
fprintf( fid, '\n' );
fprintf( fid, '//===================\n' );
fprintf( fid, '// Initialize Device\n' );
fprintf( fid, '//===================\n' );
fprintf( fid, 'void %sInit( %s *pd, char *Name, u32 BaseAddr, SysCtrl *pSysCtrl, SysDvce *pSysDvce, SysDesc *pSysDesc, SysPtrs *pSysPtrs, SysData *pSysData, %sDesc *p%sDesc, %sData *p%sData )\n', Dvc, Dvc, Dvc, Dvc, Dvc, Dvc );
fprintf( fid, '{\n' );
fprintf( fid, '    *pd             = %sInitStr;\n', Dvc );
fprintf( fid, '    pd->pSysDvce    = pSysDvce;\n' );
fprintf( fid, '    SysDvceInit(\n' );
fprintf( fid, '        pd->pSysDvce,\n' );
fprintf( fid, '        Name,\n' );
fprintf( fid, '        pSysCtrl,\n' );
fprintf( fid, '        pSysDesc,\n' );
fprintf( fid, '        pSysData,\n' );
fprintf( fid, '        pSysPtrs,\n' );
fprintf( fid, '        BaseAddr,\n' );
fprintf( fid, '        %s_CTRL_REG,\n'         , upper( Dvc ) );
fprintf( fid, '        %s_INFO_REG,\n'         , upper( Dvc ) );
fprintf( fid, '        %s_STAT_REG,\n'         , upper( Dvc ) );
fprintf( fid, '        %s_RESET,\n'            , upper( Dvc ) );
fprintf( fid, '        %s_INT_ACK,\n'          , upper( Dvc ) );
fprintf( fid, '        %s_RX_DATA_CTR_REG,\n'  , upper( Dvc ) );
fprintf( fid, '        %s_RX_SYMBOL_CTR_REG,\n', upper( Dvc ) );
fprintf( fid, '        %s_RX_FRAME_CTR_REG,\n' , upper( Dvc ) );
fprintf( fid, '        %s_RX_BLOCK_CTR_REG,\n' , upper( Dvc ) );
fprintf( fid, '        %s_TX_DATA_CTR_REG,\n'  , upper( Dvc ) );
fprintf( fid, '        %s_TX_SYMBOL_CTR_REG,\n', upper( Dvc ) );
fprintf( fid, '        %s_TX_FRAME_CTR_REG,\n' , upper( Dvc ) );
fprintf( fid, '        %s_TX_BLOCK_CTR_REG\n'  , upper( Dvc ) );
fprintf( fid, '        );\n' );
fprintf( fid, '    pd->p%sDesc  = p%sDesc;\n', Dvc, Dvc );
fprintf( fid, '    pd->p%sData  = p%sData;\n', Dvc, Dvc );
fprintf( fid, '    DvcDataInit( pd );\n' );
fprintf( fid, '    SYSRESET( pd );\n' );
fprintf( fid, '    pd->SetParams( pd );\n' );
fprintf( fid, '}\n' );
fprintf( fid, '\n' );
fprintf( fid, '//========================\n' );
fprintf( fid, '// Dump Device to Console\n' );
fprintf( fid, '//========================\n' );
fprintf( fid, 'static void Dump( %s *pd ) {\n', Dvc );
fprintf( fid, '    printf("\n"); fflush( stdout );\n' );
fprintf( fid, '    SYSDVCEDUMP( pd );\n' );
fprintf( fid, '    SysDescDump( pd );\n' );
fprintf( fid, '    DvcDescDump( pd );\n' );
fprintf( fid, '    SYSDATADUMP( pd );\n' );
fprintf( fid, '    DvcDataDump( pd );\n' );
fprintf( fid, '}\n' );
fprintf( fid, '\n' );
fprintf( fid, '// End of boilerplate code\n' );
fprintf( fid, '//========================\n' );
fprintf( fid, '// Device-specific code\n' );
fprintf( fid, '//========================\n' );
fprintf( fid, 'static void SetParams( %s *pd )\n', Dvc );
fprintf( fid, '{\n' );
fprintf( fid, '// Set PL devive slave regs here\n' );
fprintf( fid, '// Example SYSWRSLVREG( pd, %s_BOB_REG,    SYSPAR( Bob   ));\n', upper( Dvc ) );
fprintf( fid, '// Example SYSWRSLVREG( pd, %s_ALICE_REG , SYSPAR( Alice ));\n', upper( Dvc ) );
fprintf( fid, '}\n' );
fprintf( fid, '\n' );
fprintf( fid, 'static void DvcDataInit( %s *pd )\n', Dvc );
fprintf( fid, '{\n' );
fprintf( fid, '// Initialise DvcData members here\n' );
fprintf( fid, '// Example: DVCDAT( Bob ) = 0;\n' );
fprintf( fid, '}\n' );
fprintf( fid, '\n' );
fprintf( fid, 'static void DvcDataUpd( %s *pd )\n', Dvc );
fprintf( fid, '{\n' );
fprintf( fid, '// Update DvcData members here\n' );
fprintf( fid, '// Example:	DVCDAT( Bob ) = SYSRDSLVREG( pd, %s_BOB_REG );\n', upper( Dvc ) );
fprintf( fid, '}\n' );
fprintf( fid, '\n' );
fprintf( fid, 'static void DvcDataDump( %s *pd )\n', Dvc );
fprintf( fid, '{\n' );
fprintf( fid, '// Insert device-specific SysDesc members here\n' );
fprintf( fid, '// Example: printf("\nBob  : %%u", toUint( DVCDAT( Bob )) );   fflush( stdout );\n' );
fprintf( fid, '}\n' );
fprintf( fid, '\n' );
fprintf( fid, 'static void SysDescDump( %s *pd )\n', Dvc );
fprintf( fid, '{\n' );
fprintf( fid, '// Insert device-specific SysDesc members here\n' );
fprintf( fid, '// Example: printf("\nBob  : %%u", toUint( SYSPAR( Bob )) );   fflush( stdout );\n' );
fprintf( fid, '}\n' );
fprintf( fid, '\n' );
fprintf( fid, 'static void DvcDescDump( %s *pd )\n', Dvc );
fprintf( fid, '{\n' );
fprintf( fid, '// Insert device-specific %sDesc members here\n', Dvc );
fprintf( fid, '// Example: printf("\nAlice: %%u", toUint( DVCPAR( Alice )) ); fflush( stdout );\n' );
fprintf( fid, '}\n' );
fprintf( fid, '\n' );
fprintf( fid, '\n' );
fprintf( fid, '// Insert device-specific code here\n' );
fprintf( fid, '//======================================\n' );
fprintf( fid, '// Device-specific non member functions\n' );
fprintf( fid, '//======================================\n' );
fprintf( fid, '// Example: static inline void EnterAdmin    ( %s *pd ) { hwWriteCtrlReg( SYSDVC( BaseAddr ), %s_CTRL_REG << 2, %s_ENTER_ADMIN ); }\n', Dvc, upper( Dvc ), upper( Dvc ) );
fprintf( fid, '\n' );
fprintf( fid, '//=================================\n' );
fprintf( fid, '// Device-specific member functions\n' );
fprintf( fid, '//=================================\n' );
fprintf( fid, '\n' );
fprintf( fid, '// Example:\n' );
fprintf( fid, '// static u32 ReadBuf( %s *pd, u32 addr )\n', Dvc );
fprintf( fid, '// {\n' );
fprintf( fid, '//     return ( SYSPTR( pBuf[ addr ] ));\n' );
fprintf( fid, '// }\n' );
fprintf( fid, '\n' );
fprintf( fid, '\n' );
fclose( fid );
